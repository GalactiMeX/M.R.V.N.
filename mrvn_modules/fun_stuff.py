import binascii
import math

import aiohttp
import requests
from PIL import Image, ImageEnhance
from aiohttp import ClientTimeout
from bs4 import BeautifulSoup
from requests import RequestException

from decorators import mrvn_module, mrvn_command
from modular import *


class ApiError(Exception):
    text: str

    def __init__(self, text):
        self.text = text


@mrvn_module("FunStuff", "–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –Ω–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")
class FunStuffModule(Module):
    gay_react_words = ["–≥–∞–ª—è", "–≥–µ–π", "gay", "galya", "cleveron", "–∫–ª–µ–≤–µ—Ä–æ–Ω"]
    translator_api_key = None
    translator_url = "https://translate.yandex.net/api/v1.5/tr.json/translate"

    async def on_enable(self):
        FunStuffModule.translator_api_key = os.environ.get("mrvn_translator_key")

        if FunStuffModule.translator_api_key is None:
            self.logger.error("–ö–ª—é—á Yandex Translator API –Ω–µ —É–∫–∞–∑–∞–Ω. –ö–æ–º–∞–Ω–¥–∞ rtr –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

        @mrvn_command(self, "rtr", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—á–µ–Ω—å "
                                   "—Å—Ç—Ä–∞–Ω–Ω—ã–º.",
                      "<—Ç–µ–∫—Å—Ç>", keys_desc=["cmd=<–∏–º—è –∫–æ–º–∞–Ω–¥—ã>", "lang=<—è–∑—ã–∫, 2 —Å–∏–º–≤–æ–ª–∞>"])
        class RtrCommand(Command):
            @staticmethod
            async def translate(text, lang):
                async with aiohttp.ClientSession(timeout=ClientTimeout(20)) as session:
                    async with session.get(FunStuffModule.translator_url,
                                           params={"key": FunStuffModule.translator_api_key, "text": text,
                                                   "lang": lang}) as response:
                        json = await response.json()

                        if json["code"] != 200:
                            raise ApiError(json["message"])

                        return " ".join(json["text"])

            async def trans_task(self, ctx, text, lang):
                try:
                    retranslated = await self.translate((await self.translate(text, lang)), "ru")
                except (asyncio.TimeoutError, aiohttp.ClientConnectionError):
                    await ctx.send_embed(EmbedType.ERROR, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
                    return
                except ApiError as error:
                    await ctx.send_embed(EmbedType.ERROR, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API: %s" % error.text)
                    return

                await ctx.send_embed(EmbedType.INFO, retranslated, "Retranslate (—è–∑—ã–∫: %s)" % lang)

                pass

            async def execute(self, ctx: CommandContext) -> CommandResult:
                if FunStuffModule.translator_api_key is None:
                    return CommandResult.error(
                        "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ä–µ–¥–µ.")

                text: str

                if "cmd" in ctx.keys:
                    command_name = ctx.keys["cmd"].lower()

                    if command_name == self.name:
                        return CommandResult.error("–¢–∞–∫ –Ω–∏–∑—è.")

                    try:
                        command = self.module.bot.command_handler.commands[command_name]
                    except KeyError:
                        return CommandResult.error("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

                    # noinspection PyBroadException
                    try:
                        result = await command.execute(ctx)
                    except Exception:
                        return CommandResult.error("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

                    if not result.message:
                        return CommandResult.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã.")

                    text = result.message
                elif len(ctx.args) > 0:
                    text = " ".join(ctx.clean_args)
                else:
                    return CommandResult.args_error()

                if "lang" in ctx.keys:
                    lang = ctx.keys["lang"]
                else:
                    lang = random.choice(("ko", "zh", "ja", "uk", "el", "ru", "en"))

                await self.module.bot.module_handler.add_background_task(self.trans_task(ctx, text, lang), self.module)

                return CommandResult.ok(wait_emoji=True)

        @mrvn_command(self, "tte", "TextToEmoji - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É–∫–≤—ã-—ç–º–æ–¥–∑–∏", args_desc="<—Ç–µ–∫—Å—Ç>")
        class TTECommand(Command):
            emojiDict = {"a": "üá¶", "b": "üáß", "c": "üá®", "d": "üá©", "e": "üá™", "f": "üá´", "g": "üá¨", "h": "üá≠",
                         "i": "üáÆ",
                         "j": "üáØ", "k": "üá∞", "l": "üá±", "m": "üá≤", "n": "üá≥", "o": "üá¥", "p": "üáµ", "q": "üá∂",
                         "r": "üá∑",
                         "s": "üá∏", "t": "üáπ", "u": "üá∫", "v": "üáª", "w": "üáº", "x": "üáΩ", "y": "üáæ", "z": "üáø",
                         "0": "0‚É£",
                         "1": "1‚É£ ",
                         "2": "2‚É£ ", "3": "3‚É£ ", "4": "4‚É£ ", "5": "5‚É£ ", "6": "6‚É£ ", "7": "7‚É£ ", "8": "8‚É£ ", "9": "9‚É£ ",
                         "?": "‚ùî",
                         "!": "‚ùï", " ": "    ", "-": "‚ûñ"}

            async def execute(self, ctx: CommandContext) -> CommandResult:
                if len(ctx.args) < 1:
                    return CommandResult.args_error()

                string = ""
                for char in " ".join(ctx.clean_args).strip().lower():
                    string += self.emojiDict[char] + " " if char in self.emojiDict else char + " "

                await ctx.message.channel.send(string)

                return CommandResult.ok()

        @mrvn_command(self, "choice", "–í—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö", "<1, 2, 3...>")
        class ChoiceCommand(Command):
            async def execute(self, ctx: CommandContext) -> CommandResult:
                choices = " ".join(ctx.clean_args).split(", ")

                if len(choices) < 2:
                    return CommandResult.args_error()

                return CommandResult.ok("–Ø –≤—ã–±–∏—Ä–∞—é `\"%s\"`" % random.choice(choices))

        @mrvn_command(self, "prntscr", "–†–∞–Ω–¥–æ–º–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Å–µ—Ä–≤–∏—Å–∞ LightShot")
        class PrntScrCommand(Command):
            async def execute(self, ctx: CommandContext) -> CommandResult:
                chars = "abcdefghijklmnopqrstuvwxyz1234567890"
                res = None

                max_attempts = 15

                for _ in range(max_attempts):
                    code = ""

                    for i in range(5):
                        code += chars[random.randint(1, len(chars)) - 1]

                    url = "https://prnt.sc/" + code

                    html_doc = requests.get(url,
                                            headers={"user-agent": "Mozilla/5.0 (iPad; U; CPU "
                                                                   "OS 3_2 like Mac OS X; "
                                                                   "en-us) "
                                                                   "AppleWebKit/531.21.10 ("
                                                                   "KHTML, like Gecko) "
                                                                   "Version/4.0.4 "
                                                                   "Mobile/7B334b "
                                                                   "Safari/531.21.102011-10-16 20:23:10"}).text
                    soup = BeautifulSoup(html_doc, "html.parser")

                    if not soup.find_all("img")[0]["src"].startswith("//st.prntscr.com"):
                        res = soup.find_all("img")[0]["src"]
                        break

                if not res:
                    return CommandResult.error(
                        "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (%s)" % max_attempts)

                embed: discord.Embed = ctx.get_embed(EmbedType.INFO, "", "–†–∞–Ω–¥–æ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å LightShot")
                embed.set_image(url=res)

                await ctx.message.channel.send(embed=embed)

                return CommandResult.ok()

        @mrvn_command(self, "joke", "–®—É—Ç–Ω–∏–∫ 3000!")
        class CommandJoke(Command):
            phrases = ["—ã—ã—ã —ë–ø—Ç–∞ –±–ª—è", "–ø–∏—Å–æ—Å", "–≤–æ—Ç —ç—Ç–æ –ø—Ä–∏–∫–æ–ª", "–∫–æ—Ä–æ—á–µ", "–∏–¥—É —è —Ç–∞–∫–æ–π", "–∞ –æ–Ω", "–∞—Ö—É–µ—Ç—å –º–æ–∂–Ω–æ",
                       "–≤–∞—â–µ",
                       "–Ω—É —Ç—ã –ø–∏–∑–¥–µ—Ü", "–ø–∞—Ü–∞–Ω", "–ø–æ–¥—É–º–∞–ª —è", "—Å—é–¥–∞ –∏–¥–∏", "–∞ —è –µ–º—É", "–∫–∞–∫ –±—É–¥—Ç–æ",
                       "–Ω–∞ –Ω–∞—Ö—É–π!", "–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ", "–æ—Ç–∫—É–¥–∞ –Ω–∏ –≤–æ–∑—å–º–∏—Å—å", "–ù–æ–π—Ä–∞ –ø–∏–¥–æ—Ä", "–æ–∫–æ–ª–æ –ø–∞–¥–∏–∫–∞",
                       "–æ–±–º–∞–∑–∞–ª—Å—è –≥–æ–≤–Ω–æ–º",
                       "–æ—Ç—ä–µ–±–∏—Å—å", "—ç—ç—ç—ç", "–Ω—É –∏ —Ç—É—Ç —è –æ—Ö—É–µ–ª", "–ø–∏—Å–æ—Å –±–æ–º–±–∏—Ç", "—è —Ç–µ–±—è —Å—Ä–∞–º–∞—é", "–Ω–∞ –Ω–æ–≤—ã–π –≥–æ–¥",
                       "–≥–æ –ü–í–ü –∏–ª–∏ –∑–∞—Å—Å–∞–ª?!", "–î–∂–∏–≥—É—Ä–¥–∞", "–ö—Ä–∏—Å—Ç–∏–Ω–∞ - —à–ª—é—Ö–∞", "–≤–µ–¥—å —Ç–∞–∫ —è –∏ –∑–Ω–∞–ª", "–æ—Ç —ç—Ç–æ–≥–æ",
                       "–¥–∞ —Ç—ã –æ—Ö—É–µ–ª", "–∞ —Ç—ã –≤ –∫—É—Ä—Å–µ, —á—Ç–æ", "—É –ü–∏–≤–∞—Å–µ—Ä–∞ —Ö—É–π –≤ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏", "–∏ –≤–∏–∂—É –ê–∫—Å–µ–ª—å –ù–æ–π—Ä—É –µ–±—ë—Ç",
                       "–∑–∞–µ–±–∏—Å—å!", "—è –∏ –ø–æ–¥—É–º–∞–ª, —á—Ç–æ", "–ø–∏–∑–¥–∞ —Ä—É–ª—é", "–¥–∞ —è —Ç–µ–±—è –Ω–∞ –Ω–æ–ª—å —É–º–Ω–æ–∂—É", "—Ç–≤–æ—è –º–∞–º–∫–∞",
                       "–µ–±–∞–ª –≤ —Ä–æ—Ç",
                       "–ø–∞–ª—å—Ü–µ–º –≤ –∂–æ–ø–µ", "—á–ª–µ–Ω —Å–æ—Å—ë—Ç", "–µ–±—ë—Ç –≤ –ø–µ—Ä–¥–∞–∫", "–ø–∏–¥–æ—Ä!", "–∫–µ–∫", "–∫–∞–∫–æ–≥–æ —Ö—É—è?!", "–°—ç–≤–∏—á –∞–ª–∫–∞—à",
                       "–ø–∏—Å—å–∫—É –¥—Ä–æ—á–∏—Ç", "–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è", "—ë–±–∞–Ω—ã–π –≤ —Ä–æ—Ç!!", "–¥–≤–µ—Ä—å –º–Ω–µ –∑–∞–ø–∏–ª–∏!", "–Ω–∞ –≤–æ–∫–∑–∞–ª–µ",
                       "–≤—Å—é —Ö–∞—Ç—É –∑–∞–±–ª–µ–≤–∞–ª", "–æ–±–æ—Å—Ä–∞–ª—Å—è", "–∑–∞ —É–≥–ª–æ–º", "–¥—É–º–∞—é —á—Ç–æ", "—É –•–∞–ª–∞—É—Ç–∞", "–Ω—É –Ω–∞—Ö—É–π!", "–Ω–∞—Ö—É–π",
                       "–≤ —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏", "–Ω–∞ —Ö–∞—Ç–µ", "–¥–≤–∞ —á–∞—Å–∞", "–≤ —Å–µ–º—å —É—Ç—Ä–∞", "—É—Ä–∞–∞–∞!!", "—è —Å–Ω–∏–º–∞—é –Ω–∞—Ö—É–π!",
                       "–æ—Ö—É–µ–≤—à–∏–π –ì–ª–∏–∫–Ω–æ—Ç",
                       "–∫–ª–∏—Ç–æ—Ä –ª–∏–∂–µ—Ç", "–≤—Å—ë —Ö—É–π–Ω—è...", "–∫—É –∫—É —ë–ø—Ç–∞!", "—Ö–∞—Ç—É —Ä–∞–∑–≥—Ä–∏—Ñ–µ—Ä–∏–ª", "–∑–∞–µ–±–∞–ª—Å—è —è –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                       "–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑",
                       "–¥–∞ –∏ —Ö—É–π —Å –Ω–∏–º...", "—Å—É–∫–∞", "–±–æ–≥–æ—Ö—É–ª—å–Ω–∏–∫ –µ–±–∞–Ω—ã–π", "–∫–æ–Ω—á–∏–ª –Ω–∞ –ª–∏—Ü–æ", "—Ç–≤–æ—é –º–∞–º–∫—É",
                       "–ø–æ–¥—Ä–æ—á—É –ø–æ–∂–∞–ª—É–π",
                       "–∫—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å", "—Ç—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å, –Ω–æ", "–•–•–´–´–´–´...", "—Ç–æ —á—É–≤—Å—Ç–≤–æ, –∫–æ–≥–¥–∞",
                       "–Ω–µ–¥–µ–ª—é –Ω–µ –ø—Ä–æ—Å—ã—Ö–∞–ª", "–±–µ—É", "–∂–∏–¥–∫–æ-–≤–∞—Ç—Ç–æ", "–±–µ—É–±–∞—Å—Å", "–æ–π-–æ–π-–æ–π....", "40 –ª–µ—Ç –∫–∞–∫ –ø–æ–¥ –Ω–∞—Ä–∫–æ–∑–æ–º,"
                                                                                              "–µ–±–∏ –º–µ–Ω—è, –µ–±–∏!",
                       "–¥—Ä–æ—á–∏ –º–æ–π —Ö—É–π —Å–µ–±–µ –≤ —Ä–æ—Ç", "—è –∑–Ω–∞—é, —Ç—ã –ª—é–±–∏—à—å –æ—Ç—Å–∞—Å—ã–≤–∞—Ç—å!",
                       "–¥—Ä–æ—á–∏ –º–æ–∏ —Å–æ—Å–∫–∏ –∏ –µ–±–∏ –º–µ–Ω—è", "‚ôÇ300 bucks‚ôÇ", "‚ôÇfucking slave‚ôÇ", "‚ôÇstick finger in my ass‚ôÇ",
                       "‚ôÇsemen‚ôÇ", "‚ôÇfisting‚ôÇ", "–∑–∞–¥–µ–∞–Ω–æ–Ω–∏–ª –¥–∞–Ω–±–æ–Ω—É—Å–∞", "–ø–æ–µ–±–∞–ª—Å—è", "–Ω–∞ —Ñ–æ–Ω—Ç–∞–Ω–∫—É", "–≤ –∫–æ–ª–ø–∏–Ω–æ",
                       "–º–æ—è –∂–∞–¥–Ω–∞—è –ø–∏–∑–¥–∞ —Ö–æ—á–µ—Ç —Ç–≤–æ–π —Ö—É–π"]

            async def execute(self, ctx: CommandContext) -> CommandResult:
                out = ""

                for i in range(random.randint(1, 16)):
                    out += random.choice(self.phrases) + " "

                return CommandResult.info(out, "–®—É—Ç–Ω–∏–∫ 3000")

        @mrvn_command(self, "beucode",
                      "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ –ë–µ—É–∫–æ–¥ –∏ –æ–±—Ä–∞—Ç–Ω–æ. –ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –ë–µ—É–∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç –∏–ª–∏ "
                      "—Ç–µ–∫—Å—Ç –≤ –ë–µ—É–∫–æ–¥, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —É–∫–∞–∂–µ—Ç–µ.",
                      "<—Ç–µ–∫—Å—Ç –∏–ª–∏ –ë–µ—É–∫–æ–¥>")
        class CommandBeucode(Command):
            @staticmethod
            def str_to_beucode(string: str):
                bits = bin(int(binascii.hexlify(string.encode("utf-8", "surrogatepass")), 16))[2:]

                return bits.zfill(8 * ((len(bits) + 7) // 8)).replace("0", "üê∑").replace("1", "üêó")

            @staticmethod
            def beucode_to_str(string: str):
                bits = string.replace("üê∑", "0").replace("üêó", "1")

                n = int(bits, 2)

                return n.to_bytes((n.bit_length() + 7) // 8, "big").decode("utf-8", "surrogatepass") or "\0"

            async def execute(self, ctx: CommandContext) -> CommandResult:
                if len(ctx.clean_args) < 1:
                    return CommandResult.args_error()

                cmd_input = " ".join(ctx.clean_args)

                beucode = re.findall(r"[üêóüê∑]", cmd_input)

                mode = len(beucode) > 0

                try:
                    if mode:
                        out = self.beucode_to_str(cmd_input)
                    else:
                        out = self.str_to_beucode(cmd_input)
                except (ValueError, UnicodeDecodeError):
                    return CommandResult.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")

                return CommandResult.info(out, "–ë–µ—É–∫–æ–¥ (—Ä–µ–∂–∏–º: %s)" % ("Beucode ‚û° Text" if mode else "Text ‚û° Beucode"))

        @mrvn_command(self, "ita", "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ ASCII-–∞—Ä—Ç.", "<–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ>",
                      ["size=<15 - 1000> - —Ä–∞–∑–º–µ—Ä –∞—Ä—Ç–∞. 750 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."])
        class ITACommand(Command):
            async def execute(self, ctx: CommandContext) -> CommandResult:
                if len(ctx.message.attachments) != 0:
                    try:
                        req = requests.get(ctx.message.attachments[0].url, allow_redirects=True)
                    except RequestException:
                        return CommandResult.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    with open("src_image_%s.png" % ctx.message.id, "wb") as f:
                        f.write(req.content)
                    try:
                        img = Image.open("src_image_" + str(ctx.message.id) + ".png")

                    except (IOError, TypeError):
                        return CommandResult.error("–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

                    size = 750

                    if "size" in ctx.keys:
                        try:
                            size = max(min(1000, int(ctx.keys["size"])), 15)
                        except ValueError:
                            return CommandResult.args_error("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")

                    img = img.convert("L")
                    img = ImageEnhance.Contrast(img).enhance(1.5)

                    symbols = ["‚ñë‚ñë", "‚ñë‚ñë", "‚ñí‚ñí", "‚ñí‚ñí", "‚ñì‚ñì", "‚ñì‚ñì", "‚ñà‚ñà", "‚ñà‚ñà"]
                    res = ""

                    asp = math.sqrt((img.height * img.width) / size)
                    img = img.resize((int(img.size[0] / asp), int(img.size[1] / asp)), Image.ANTIALIAS)

                    for i in range(img.height):
                        for j in range(img.width):
                            pixel = img.getpixel((j, i))
                            res = res + symbols[int((pixel * 7) / 255)]
                        res = res + "\n"

                    os.remove("src_image_%s.png" % ctx.message.id)
                    await ctx.message.channel.send("```%s```" % res)

                    return CommandResult.ok()

                else:
                    return CommandResult.args_error()

    async def on_event(self, event_name, *args, **kwargs):
        if event_name == "on_message":
            message: discord.Message = args[0]

            for word in self.gay_react_words:
                if word in message.content.lower():
                    await message.add_reaction("üè≥Ô∏è‚Äçüåà")
        elif event_name == "on_reaction_add":
            reaction: discord.Reaction = args[0]

            if reaction.count > 2:
                await reaction.message.add_reaction(reaction)
